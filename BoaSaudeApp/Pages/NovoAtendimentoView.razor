@page "/novo"
@using Dominio.UsuarioModel;
@using Dominio.AtendimentoModel;
@using Dominio.GeotecnologiaModel;
@using Dominio;
@using BoaSaudeApp.Pages.ViewModel;
@using Blazored.Modal;
@using Blazored.Modal.Services
@using Newtonsoft.Json;
@using System;
@using Microsoft.Extensions.Configuration;
@using Flurl;
@using Flurl.Http;
@inject Service.Interface.IAssociadoService associadoService;
@inject Service.Interface.IConveniadoPrestadorService conveniadoPrestadorService;
@inject Service.Interface.IAtendimentoService atendimentoService;
@inject Service.Interface.ICidadeService cidadeService;
@inject Service.Interface.IPrestadorService prestadorService;
@inject IModalService modal;
@inject IJSRuntime JSRuntime;
@inject IConfiguration configuration;
@inject AuthenticationStateProvider authState;


<EditForm Model="@atendimentoNovo" OnValidSubmit="@(async e => await NovoAtendimento())">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container-fluid m-2" style="height: 100px;">
        <h3>Novo atendimento</h3>

        <div class="row mb-1">
            <div class="col-8">
                <span for="exampleDataList" class="form-label">Associado</span>
                <input @bind="@atendimentoNovo.AssociadoIdSelecionado" class="form-control" list="datalistOptions" id="exampleDataList" placeholder="Digite para pesquisar...">
                <datalist id="datalistOptions">
                    @foreach (var associado in _associados)
                    {
                        <option value="@associado.Nome">@associado.Nome</option>
                    }
                </datalist>
                <ValidationMessage For="(()=> atendimentoNovo.AssociadoIdSelecionado)" />
            </div>
        </div>
        <div class="row align-items-start mb-1">
            <div class="col-4">
                <span for="valor" class="control-label">Data</span>
                <input @bind="@atendimentoNovo.Data" type="date" class="form-control" id="valor" placeholder="Data">
            </div>

            <div class="col-4">
                <span for="horario" class="control-label">Horário</span>
                <input @bind="@atendimentoNovo.Horario" type="time" class="form-control" id="horario" placeholder="Horário">
            </div>
        </div>
        <div class="row align-items-start mb-1">
            <div class="col-8">
                <span for="conveniadoList" class="form-label">Conveniado</span>
                <input @bind="@atendimentoNovo.ConveniadoIdSelecionado" class="form-control" list="datalistOptions2" id="conveniadoList" placeholder="Digite para pesquisar...">
                <datalist id="datalistOptions2">
                    @foreach (var conveniado in _conveniados)
                    {
                        <option value="@conveniado.Conveniado.NomeFantasia">@conveniado.Conveniado.NomeFantasia</option>
                    }
                </datalist>
            </div>
        </div>
        <div class="row align-items-start mb-4">
            <div class="col-4">
                <span for="procedimento" class="control-label">Procedimento</span>
                <select id="procedimento" class="form-control" aria-label="Procedimento" @bind="@ProcedimentoIdSelecionado">
                    <option selected>Selecionar</option>
                    @foreach (var procedimento in _procedimentos)
                    {
                        <option value=@ObterProcedimentoId(procedimento.Key)>@ObterDescricaoProcedimento(procedimento.Key)</option>
                    }
                </select>
            </div>

            <div class="col-4">
                <span for="horario" class="control-label">Valor</span>
                <input type="number" @bind="atendimentoNovo.Valor" class="form-control" id="horario" placeholder="Valor">
            </div>
        </div>

        <div class="justify-content-end">
            <input class="btn btn-primary" disabled="@BtnDisabled" type="submit" value="Novo atendimento">
        </div>
    </div>
</EditForm>

@code {
    private bool BtnDisabled { get; set; } = false;
    private AtendimentoView atendimentoNovo = new AtendimentoView { Data = DateTime.Now.Date, Horario = DateTime.Now };
    private Dictionary<ProcedimentoEnum, decimal> _procedimentos =
    new Dictionary<ProcedimentoEnum, decimal>() {
            {
                ProcedimentoEnum.Consulta, 50
            },
            {
                ProcedimentoEnum.Retorno, 100
            }};

    private IEnumerable<Associado> _associados = new List<Associado>();
    private IEnumerable<ConveniadoPrestador> _conveniados = new List<ConveniadoPrestador>();
    private Prestador _usuarioLogado;

    private Coordenadas _coordenadas { get; set; }

    private async Task NovoAtendimento()
    {
        BtnDisabled = true;

        var dataHorarioAgendamento = atendimentoNovo.Data
        .AddHours(atendimentoNovo.Horario.Hour)
        .AddMinutes(atendimentoNovo.Horario.Minute);

        //var endereco = await BuscarEnderecoPorCoordenadas();
        //var cidadeId = await BuscarCidadeId(endereco);

        var atendimento = new Atendimento(
        atendimentoNovo.Valor,
        StatusProcessoEnum.Apuracao,
        dataHorarioAgendamento,
        _usuarioLogado.Id,
        ConveniadoIdSelecionado,
        AssociadoIdSelecionado,
        1);

        await atendimentoService.NovoAtendimento(atendimento);

        ModalConfirmacao();
        ResetarForm();

        BtnDisabled = false;
    }

    private async Task<EnderecoDetalhes> BuscarEnderecoPorCoordenadas()
    {
        try
        {
            var coordenadas = _coordenadas.ParaString();

            var url = configuration.GetConnectionString("PositionStackUrl");
            var accessKey = configuration.GetConnectionString("PositionStackAccessKey");

            var endereco = await url
                .AppendPathSegment("reverse")
                .SetQueryParams(
                    new
                    {
                        access_key = accessKey,
                        query = coordenadas
                    })
                .GetAsync()
                .ReceiveJson<Endereco>();

            return endereco.Data.FirstOrDefault();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            throw ex;
        }
    }

    private async Task<int> BuscarCidadeId(EnderecoDetalhes endereco)
    {
        var cidade = await BuscarCidade(endereco.Cidade);

        if (cidade == null)
            cidade = await CadastrarCidade(
                new Cidade(endereco.Cidade, endereco.CodigoEstado));

        return cidade.Id;
    }

    private async Task<Cidade> BuscarCidade(string descricao)
    {
        return await cidadeService.BuscarCidadePorDescricao(descricao);
    }

    private async Task<Cidade> CadastrarCidade(Cidade cidade)
    {
        return await cidadeService.CadastrarCidade(cidade);
    }

    private void ResetarForm()
    {
        atendimentoNovo = new AtendimentoView()
        {
            Data = DateTime.Now.Date,
            Horario = DateTime.Now
        };
    }

    private void ModalConfirmacao()
    {
        modal.Show<ModalAvisoView>("Sucesso!");
    }

    private int AssociadoIdSelecionado
    {
        get
        {
            return _associados.FirstOrDefault(c =>
              c.Nome.Equals(atendimentoNovo.AssociadoIdSelecionado))
              .Id; ;
        }
    }

    private int ConveniadoIdSelecionado
    {
        get
        {
            return _conveniados.FirstOrDefault(c =>
              c.Conveniado.NomeFantasia.Equals(atendimentoNovo.ConveniadoIdSelecionado))
              .ConveniadoId; ;
        }
    }

    private string ProcedimentoIdSelecionado
    {
        get
        {
            return atendimentoNovo.ProcedimentoId;
        }
        set
        {
            MudouProcedimento(value);
        }
    }

    private void MudouProcedimento(string procedimentoId)
    {
        atendimentoNovo.ProcedimentoId = procedimentoId;

        var procedimentoIdConvertido = Convert.ToInt32(procedimentoId);

        switch (procedimentoIdConvertido)
        {
            case 1:
                atendimentoNovo.Valor = 50;
                break;
            case 2:
                atendimentoNovo.Valor = 100;
                break;
            case 3:
                atendimentoNovo.Valor = 150;
                break;
            default:
                atendimentoNovo.Valor = 0;
                break;
        }
    }

    private int ObterProcedimentoId(ProcedimentoEnum procedimento)
    {
        switch (procedimento)
        {
            case ProcedimentoEnum.Consulta:
                return 1;
            case ProcedimentoEnum.Retorno:
                return 2;
            default:
                return 1;
        }
    }

    private string ObterDescricaoProcedimento(ProcedimentoEnum procedimento)
    {
        switch (procedimento)
        {
            case ProcedimentoEnum.Consulta:
                return "Consulta";
            case ProcedimentoEnum.Retorno:
                return "Retorno";
            default:
                return "Não selecionado";
        }
    }

    private async Task<Coordenadas> BuscarCoordenadas()
    {
        var coordenadas = await JSRuntime.InvokeAsync<string>("getCoordenadas");
        return JsonConvert.DeserializeObject<Coordenadas>(coordenadas);
    }

    protected override async Task OnInitializedAsync()
    {
        var auth = await authState.GetAuthenticationStateAsync();
        _usuarioLogado = await prestadorService.BuscarPrestador(auth.User.Identity.Name);
        _associados = await associadoService.BuscarAssociadosAtivos();
        _conveniados = await conveniadoPrestadorService.BuscarConveniadosPorPrestador(1);
        _coordenadas = await BuscarCoordenadas();
    }
}
